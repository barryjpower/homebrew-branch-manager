#!/bin/bash
unset BRANCH

BASE=`pwd`
GITS=`find . -name .git -type d -prune`

TOTAL=`find . -name .git -type d -prune | wc -l`


# set verbose level to info
__VERBOSE=3
__QUIET="--quiet"

declare -a LOG_LEVELS
LOG_LEVELS=([0]="emerg" [1]="alert" [2]="crit" [3]="err" [4]="warning" [5]="notice" [6]="info" [7]="debug")
function .log () {
  local LEVEL=${1}
  shift
  if [ ${__VERBOSE} -ge ${LEVEL} ]; then
    echo "[${LOG_LEVELS[$LEVEL]}]" "$@"
  fi
}

loop() {
    COUNT=0
    echo -ne '\t'$COUNT/$TOTAL'\r'

    for g in $GITS
    do
        COUNT=$((COUNT+1))

    	cd $BASE
    	cd $g/..

        case $1 in
            c)
                clean
                ;;
            r)
                reset
                ;;
            u)
                update
                ;;
            s)
                switch
                ;;
        esac

        echo -ne '\t'$COUNT/$TOTAL'\r'
    done
}

clean() {
    git branch --merged | grep -v "\*" | xargs -n 1 git branch -d ${__QUIET}
    git fetch -p ${__QUIET} && for branch in `git branch -vv | awk '{print $1,$4}' | grep 'gone]' | awk '{print $1}'`; do git branch -D $branch ${__QUIET}; done
}

reset() {
    git fetch origin ${__QUIET}
    git reset --hard origin/master ${__QUIET}
    git pull ${__QUIET}
}

update() {
    git pull ${__QUIET}
}

getRemoteBranch() {
	remote=`git branch -a | grep $BRANCH`
    if [ -n "$remote" ]; then
        	git checkout -b $BRANCH origin/$BRANCH ${__QUIET}
		return 1
	else
		return 0
	fi
}

switch() {

    DIR=`pwd`

	if [ $BRANCH == "master" ]; then
        git checkout master ${__QUIET}
        .log 6 switched to $BRANCH in $DIR
        echo -ne '\t'$COUNT/$TOTAL'\r'
		continue
	fi

	exists=`git show-ref refs/heads/$BRANCH`
	if [ -n "$exists" ]; then
		git checkout $BRANCH ${__QUIET}
        .log 6 switched to $BRANCH in $DIR
	else
		getRemoteBranch
		if [ "$?" -eq "0" ]; then
			git fetch origin ${__QUIET}
			getRemoteBranch
            if [ "$?" -eq "0" ]; then
                NOTFOUND=0
                .log 4 $BRANCH not found in $DIR
            else
                .log 6 switched to $BRANCH in $DIR
            fi
        else
            .log 6 switched to $BRANCH in $DIR
        fi
	fi
}

man() {
    usage="$(basename "$0") [-h] [-v] [-c] [-r] [-s <branch>] [-u] -- git branch manager for subdirectories

    navigates directories below the starting point and executes the selected option on each git repo found

    where:
    -h  show this help text
    -c  cleanup: deleted local branches that are fully merged into master; delete local branches when the remote branch no longer exists
    -r  hard reset to origin/master and pull
    -s  switch to the specified <branch>.  If the branch does not exist for a repo it is switched to master.
    -u  update (pull)
    -v  verbose: shows any output of git commands (otherwise executed with --quiet) and some custom logging"

    echo "$usage"
}

runClean=0
runReset=0
runSwitch=0
runUpdate=0

while getopts "crs:vhu" opt; do
    case $opt in
        c)
            runClean=1
            ;;
        r)
            runReset=1
            ;;
        s)
            BRANCH=$OPTARG
            runSwitch=1
            ;;
        v)
            __VERBOSE=7
            __QUIET=""
            ;;
        h)
            man
            ;;
        u)
            runUpdate=1
            ;;
  esac
done

if [ $runClean -eq 1 ]; then
    echo clean
    loop c
fi

if [ $runReset -eq 1 ]; then
    echo reset
    loop r
fi

if [ $runSwitch -eq 1 ]; then
    echo switch to $BRANCH
    loop s
fi

if [ $runUpdate -eq 1 ]; then
    echo update
    loop u
fi
